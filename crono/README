To build crono, run `ant` from the toplevel directory.

To run crono:
  java -cp bin crono.Crono [-dDhpqst] [files ...]

Builtin Functions:
  car : (car arg1)
    Returns the value in the given cons cell
      (car (5 10 15))
      Result: 5

  cdr : (cdr arg1)
    Returns the value in the cdr of the given cons cell.
      (cdr (5 10 15))
      Result: (10 15)

  cons : (cons arg1 arg2)
    Creates a new cons cell with the value arg1 in its car, and arg2 in its
    cdr.
      (cons 1 (cons 2 (cons 3 (cons 4 Nil))))
      Result: (1 2 3 4)

  if : (if test truebranch falsebranch)
    Evaluates test and if non-nil evaluates the truebranch argument; if
    the test evaluates to Nil then the falsebranch argument is evaluated.
      (if Nil (+ 1) (+ 2))
      Result: (\ (__interp_0) (+ 2 __interp_0))

  define - (define sym value)
    Places a new symbol in the current environment with the given value.
      (define m_pi 3.141592654)
      Result: 3.141592654

  let - (let subst_pairs body)
    Evaluates the body of the statment with the pairs defined in subst_pairs.
    subst_pairs consists of a cons of cons, where each sub cons is a pair of
    a symbol and a value. Correct usage looks like:
      (let ((x 10) (y 15)) (+ x y))
      Result: 25

  \ : (\ arguments body)
    Creates a new lambda function with the given arguments and body. Arguemnts
    to lambdas mask any values in the environment with the same Symbol.
      (\ (x y) (+ x y))
      Result: (\ (x y) (+ x y))

  + : (+ num1 num2)
    Adds the two numbers together. The numbers can be either Integers or Floats
    and do not need to be of the same type.
      (+ 1 1.0)
      Result: 2.0
  
  - : (- num1 num2)
    Subtracts num2 from num1. The numbers can be either Integers or Floats and
    do not need to be of the same type.
      (- 4.0 2)
      Result: 2.0

  * : (* num1 num2)
    Multiplies the two numbers together. The numbers can be either Integers or
    Floats and do not need to be of the same type.
      (* 2 2)
      Result: 4

  / : (/ num1 num2)
    Divides num1 by num2. The numbers can be either Integers of Floats and do
    not need to be of the same type.
      (/ 4 2)
      Result: 2

  = : (= arg1 arg2)
    Compares the two arguments for equality. The arguments can be of any type.
    If they are equal, T is returned; otherwise Nil is returned.
      (= 4 (+ 1 3))
      Result: T
