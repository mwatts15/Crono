package crono.inf;import java.util.*;import crono.type.*;public class InfClass extends Atom{  public static final TypeId TYPEID = new TypeId("inf:Class",InfClass.class,Atom.TYPEID);	protected String name;	protected int id;	public static int count;  	public InfClass()	{		this.id = InfClass.count++;		this.name = "i"+this.id;	}	public InfClass(String name)	{		this.name = name;		this.id = InfClass.count++;	} 		//pseudo-inheritance for user-defined classes achieved by reading through database		public String getName(){		return name;	}	public int getID(){		return id;	}		//used only by rdf/rdfs/owl	public boolean applyFunctions(InfTriple contained, ArrayList<InfTriple> db){		System.out.println("||My name is "+getName()+" and I'm running my function.");		return fn(contained,db);//fn(contained,db);	}		protected boolean fn(InfTriple contained, ArrayList<InfTriple> db){		//System.out.println("Dummy Function running...");		return false;	}	  public TypeId typeId() {      return InfClass.TYPEID;  }  public String toString() {      return name;  }  /*public String repr() {      return "\"" + data.toString() + "\"";  }*/    	//method overrides		@Override public boolean equals(Object class2)	{		if(class2 instanceof InfClass)			return this.getID() == ((InfClass)class2).getID();		return false;	}		@Override public int hashCode()	{		return getID(); //name is irrelevant	}}