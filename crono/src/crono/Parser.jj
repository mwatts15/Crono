options {
  STATIC = false;
}

PARSER_BEGIN(Parser)

package crono;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import crono.type.Atom;
import crono.type.Cons;
import crono.type.CronoCharacter;
import crono.type.CronoFloat;
import crono.type.CronoInteger;
import crono.type.CronoString;
import crono.type.CronoType;
import crono.type.Nil;
import crono.type.Symbol;
import crono.type.TruthValue;

public class Parser {
  public static Types types = new Types();
  
  public static boolean debug = false;
}

PARSER_END(Parser)

SKIP:
{
    " "
  | "\t"
  | "\n"
  | "\r"
  | < "%" (~["\n","\r"])* ("\n"|"\r") >
}

TOKEN:
{
    < NIL : (["N", "n"] ["I", "i"] ["L", "l"]) | ("#f" | "#F") >
  | < TRUE : ("#t" | "#T") >
}

TOKEN:
{
    < LPAR : "(" >
  | < RPAR : ")" >
  | < INTEGER : ("-")? (["0"-"9"])+ >
  | < FLOAT : ("-")? (["0"-"9"])+ "." (["0"-"9"])+ >
  | < CHAR : "'" ([" "-"~"] | ("\\" ~["\n", "\r", "\t"])) "'" >
  | < STRING : "\"" ("\\" ~["\n"] | ~["\"", "\n"])* "\"" >
  | < TYPEID : ":" (["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","-"])?)+ >
  | < SYMBOL : ["!"-"&", "*"-"/", ";"-"~"] (["!"-"'", "*"-"~"])* >
  | < QUOTE : "'" >
}

TOKEN:
{
  < ERROR : ~[] >
}

Atom atom():
{
  Token n;
  Atom a;
}
{
    n = <INTEGER> {
      if(debug) {
        System.out.println("Parser: Saw <INTEGER>");
      }
      return new CronoInteger(n.image);
    }
  | n = <FLOAT> {
      if(debug) {
        System.out.println("Parser: Saw <FLOAT>");
      }
      return new CronoFloat(n.image);
    }
  | n = <CHAR> {
      if(debug) {
        System.out.println("Parser: Saw <CHAR>");
      }
      return new CronoCharacter(n.image);
    }
  | n = <TYPEID> {
      if(debug) {
        System.out.println("Parser: Saw <TYPEID>");
      }
      types.get(n.image);
    }
  | n = <SYMBOL> {
      if(debug) {
        System.out.println("Parser: Saw <SYMBOL>");
      }
      return new Symbol(n.image);
    }
  | n = <STRING> {
      if(debug) {
        System.out.println("Parser: Saw <STRING>");
      }
      return new CronoString(n.image);
    }
}

Cons list():
{
  Token n;
  CronoType node;
  List<CronoType> args = new ArrayList<CronoType>();
}
{
    <NIL> {
      if(debug) {
        System.out.println("Parser: Saw <NIL>");
      }
      return Nil.NIL;
    }
  | <TRUE> {
      if(debug) {
        System.out.println("Parser: Saw <TRUE>");
      }
      return TruthValue.T;
    }
  | <LPAR>
    (
      node = node() {
        args.add(node);
      }
    )* <RPAR> {
      if(debug) {
        System.out.println("Parser: Saw LIST");
      }
      if(args.size() == 0) {
        return Nil.NIL;
      }else {
        return Cons.fromList(args);
      }
    }
}

CronoType node():
{
  Cons c;
  Atom a;
  boolean quoted = false;
}
{
  (
      <QUOTE>
      (
          c = list() {
            c.quote(true);
            return c;
	  }
	| a = atom() {
            a.quote(true);
	    return a;
          }
      )
    | (
          c = list() {
            return c;
          }
        | a = atom() {
            return a;
          }
      )
  )
}


CronoType statement():
{
  CronoType s;
}
{
  (
      s = node() {
        return s;
      }
    | <EOF> {
        return null;
      }
  )
}

CronoType program():
{
  List<CronoType> statements = new LinkedList<CronoType>();
  CronoType s;
}
{
  (
    s = node() {
      statements.add(s);
    }
  )* {
    if(statements.size() <= 0) {
      return Nil.NIL;
    }
    return Cons.fromList(statements);
  }
}
